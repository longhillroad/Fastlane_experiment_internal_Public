# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.81.0"

default_platform :android

def check_env_var(var_arr)
    var_arr.each { |v|
      if !ENV.has_key?(v) or ENV[v].empty?
        puts "Please set environment variable #{v} probably before running this command."
        exit!
      end
    }
end

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "make a release. This lane requires: 1) \"public\" and \"origin\" remote have been configured; 2) developers should have already added release notes in README.md"
	desc "and modified version number strings in various files; 3) there is already a release/x.y.z branch existing. Developers make a PR from release branch to master"
	desc "branch, release engineer merges PR, than run command like"
  desc " fastlane release version_number:\"1.3.00\""
  lane :release do |options|
    check_env_var(["GITHUB_API_TOKEN", "RELEASE_USER"])
    repo_name="longhillroad/Fastlane_experiment_internal_Public"
    release_number= options[:version_number]
    v="v"+release_number

    # push master branch from internal repo to public repo
		git_command(full_command: "git config user.email " + ENV["RELEASE_USER"])
    git_command(full_command: "git checkout master")
    ensure_git_branch(branch: "master")
    git_pull
    ensure_git_status_clean
    git_command(full_command: "git push public master");

    # not use automatic publish for now since it will trigger massive release emails immediately so be careful
    #publish a release which will create the tag on public. this requires you to set your own environment variable GITHUB_API_TOKEN
    #set_github_release(api_token: ENV["GITHUB_API_TOKEN"], repository_name: repo_name, tag_name: v, name: v+" Release", description: "see README.md for details")
    # pull tag to local
    #git_command(full_command: "git pull public master --tags");
    # push tag to internal repo
    #git_command(full_command: "git push origin #{v}");

    #when the above auto-publish is not used, create and push tags here.
		git_command(full_command: "git tag -a #{v} -m \"#{v} tag\"");
		git_command(full_command: "git push origin #{v}");
		git_command(full_command: "git push public #{v}");

    # push a release branch
    git_command(full_command: "git checkout release/#{release_number}")
    # origin must have this release branch already
    git_command(full_command: "git pull")
    ensure_git_branch(branch: "release/#{release_number}")
    ensure_git_status_clean
    git_command(full_command: "git push public release/#{release_number}")

    # if not auto-publish above, log in with release user on github and do release if everything is OK.
    # create PR to merge master back to develop and notify tech lead
    # send release notification email
    puts "Code push completed successfully. Do release pubish if not yet when everything is OK."
    puts "Then create PR to merge master back to develop"
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is sent or shared. Learn more at https://github.com/fastlane/enhancer
